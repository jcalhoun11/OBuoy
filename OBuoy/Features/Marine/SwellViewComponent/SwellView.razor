@using System.Text.Json
@using Microsoft.AspNetCore.WebUtilities
@using MongoDB.Bson
@using MongoDB.Driver
@using OBuoy.Entities.Location

<div class="swell-container">
    <div class="Ocean">

        <svg class="Wave" viewBox="0 0 12960 1120">
            <path d="M9720,320C8100,320,8100,0,6480,0S4860,320,3240,320,1620,0,0,0V1120H12960V0C11340,0,11340,320,9720,320Z">

                <animate dur="5s"
                         repeatCount="indefinite"
                         attributeName="d"
                         values="@waveAnimation" />

            </path>

        </svg>

    </div>
    <div class="wave-info">
        WaveHeight: @waveHeightString - WavePeriod: @wavePeriod - WaveModel: @waveModel - Time: @timeString
    </div>
</div>

@code {
    [Parameter]
    public UserLocation? Location { get; set; }

    MarineWave? marineWave;

    string wavePeriod = "5s";
    string waveAnimation = string.Empty;
    string waveHeightString = "1";
    string waveModel = "1";
    string timeString = string.Empty;

    HttpClient waveClient = new();
    readonly string marineBase = "https://marine-api.open-meteo.com/v1/marine";
    readonly string[] marineVariables = new[] { "wave_height", "wave_direction", "wave_period", "wind_wave_height", "wind_wave_direction", "wind_wave_period", "wind_wave_peak_period", "swell_wave_height", "swell_wave_direction", "swell_wave_period", "swell_wave_peak_period", "ocean_current_velocity", "ocean_current_direction" };

    protected override async Task OnInitializedAsync()
    {
        if (Location is not null)
            await GetMarineWaveInformation(Location);
    }

    public async ValueTask LoadNewLocation(UserLocation newLocation) =>
        await GetMarineWaveInformation(newLocation);

    async Task GetMarineWaveInformation(UserLocation location)
    {

        marineWave = await GetWaveConditions(location);

        if (marineWave is not null)
            await SetMarineWave(marineWave);
    }

    async Task SetMarineWave(MarineWave marineWave)
    {
        List<string> times = marineWave.hourly.time.ToList();
        string localTime = DateTime.Now.Hour.ToString();
        timeString = times.FirstOrDefault(x => x.Contains(localTime), "0");
        int index = times.IndexOf(timeString);
        string wp = marineWave.hourly.wave_period[index].ToString();
        if (double.TryParse(wp, out double wave_period))
            wavePeriod = $"{wave_period}s";

        int waveHeightInt = 0;
        string waveHeight = marineWave.hourly.wave_height[index].ToString();
        if (double.TryParse(waveHeight, out double waveHeightInMeters))
        {
            double waveHeightInFeet = ConvertToFeet(waveHeightInMeters);
            waveHeightString = waveHeightInFeet.ToString();
            Math.Round(waveHeightInFeet, MidpointRounding.AwayFromZero);
            waveHeightInt = Convert.ToInt32(waveHeightInFeet);
            waveModel = waveHeightInt.ToString();
        }

        try
        {
            string url = Environment.GetEnvironmentVariable("MongoDBConnection") ?? string.Empty;
            if (url == string.Empty)
                return;

            var mongoClient = new MongoClient(url);
            var mongoDB = mongoClient.GetDatabase("OBuoy");
            var waveCollection = mongoDB.GetCollection<WavePath>("WavePath");
            var query = Builders<WavePath>.Filter.Eq("WaveHeight", waveHeightInt);
            WavePath? waveInfo = await waveCollection.Find(query).FirstOrDefaultAsync();

            if (waveInfo is not null)
                waveAnimation = $"{waveInfo.CrestPath}; {waveInfo.TroughPath}; {waveInfo.CrestPath}";
        }
        catch (Exception ex)
        {
            //Log Error
            string message = ex.InnerException?.Message ?? ex.Message;
        }
    }

    double ConvertToFeet(double meters) => meters * 3.28;

    async Task<MarineWave> GetWaveConditions(UserLocation location)
    {

        string waveQuery = CreateMarineQuery(location.Latitude.ToString(), location.Longitude.ToString());
        var response = await waveClient.GetAsync(waveQuery);

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    UnmappedMemberHandling = System.Text.Json.Serialization.JsonUnmappedMemberHandling.Skip,
                    ReadCommentHandling = JsonCommentHandling.Skip,
                    AllowTrailingCommas = true,
                };
            MarineWave? waveInfo = JsonSerializer.Deserialize<MarineWave?>(await response.Content.ReadAsStringAsync(), options);
            return waveInfo ?? new MarineWave();
        }
        else
        {
            return new MarineWave();
        }
    }

    string CreateMarineQuery(string latitude, string longitude)
    {
        IDictionary<string, string?> queryParameters = new Dictionary<string, string?>();
        queryParameters.Add("latitude", latitude);
        queryParameters.Add("longitude", longitude);
        queryParameters.Add("hourly", string.Join(",", marineVariables));
        queryParameters.Add("timezone", "America/Chicago");
        return QueryHelpers.AddQueryString(marineBase, queryParameters);
    }

    public class MarineWave
    {
        public float latitude { get; set; }
        public float longitude { get; set; }
        public float generationtime_ms { get; set; }
        public int utc_offset_seconds { get; set; }
        public string timezone { get; set; }
        public string timezone_abbreviation { get; set; }
        public double elevation { get; set; }
        public Hourly_Units hourly_units { get; set; }
        public Hourly hourly { get; set; }
    }

    public class Hourly_Units
    {
        public string time { get; set; }
        public string wave_height { get; set; }
        public string wave_direction { get; set; }
        public string wave_period { get; set; }
        public string wind_wave_height { get; set; }
        public string wind_wave_direction { get; set; }
        public string wind_wave_period { get; set; }
        public string wind_wave_peak_period { get; set; }
        public string swell_wave_height { get; set; }
        public string swell_wave_direction { get; set; }
        public string swell_wave_period { get; set; }
        public string swell_wave_peak_period { get; set; }
        public string ocean_current_velocity { get; set; }
        public string ocean_current_direction { get; set; }
    }

    public class Hourly
    {
        public string[] time { get; set; }
        public float[] wave_height { get; set; }
        public int[] wave_direction { get; set; }
        public float[] wave_period { get; set; }
        public float[] wind_wave_height { get; set; }
        public int[] wind_wave_direction { get; set; }
        public float[] wind_wave_period { get; set; }
        public object[] wind_wave_peak_period { get; set; }
        public float[] swell_wave_height { get; set; }
        public int[] swell_wave_direction { get; set; }
        public float[] swell_wave_period { get; set; }
        public object[] swell_wave_peak_period { get; set; }
        public float[] ocean_current_velocity { get; set; }
        public int[] ocean_current_direction { get; set; }
    }

    public class WavePath
    {
        public object _id { get; set; }
        public int WaveHeight { get; set; }
        public string? CrestPath { get; set; }
        public string? TroughPath { get; set; }
    }
}
